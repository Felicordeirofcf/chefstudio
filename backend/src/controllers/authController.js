const User = require("../models/User"); // Assuming models are defined
const jwt = require("jsonwebtoken");

// Helper to generate JWT (Simulated Secret)
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET || "YOUR_SIMULATED_JWT_SECRET", {
    expiresIn: "30d", // Example expiration
  });
};

// @desc    Register a new user (Simulated)
// @route   POST /api/auth/register
// @access  Public
const registerUser = async (req, res) => {
  const { name, email, password, restaurantName, businessType, address, whatsapp, menuLink } = req.body;

  console.log("Simulating registration for:", email);

  // Simulate basic validation
  if (!name || !email || !password) {
    return res.status(400).json({ message: "Por favor, forneça nome, email e senha." });
  }

  // Simulate checking if user exists (in a real app, query the DB)
  if (email === "exists@example.com") { // Simulate existing user
      return res.status(400).json({ message: "Usuário já existe (simulado)." });
  }

  // Simulate creating user data (don't save to DB in simulation)
  const simulatedUser = {
    _id: `sim_${Date.now()}`,
    name,
    email,
    restaurantName,
    businessType,
    address,
    whatsapp,
    menuLink,
    subscriptionStatus: "trial", // Simulate starting with a trial
    metaConnectionStatus: "disconnected",
    // password hash would be generated by model pre-save hook if actually saving
  };

  console.log("Simulated user created:", simulatedUser);

  // Simulate successful registration
  res.status(201).json({
    _id: simulatedUser._id,
    name: simulatedUser.name,
    email: simulatedUser.email,
    restaurantName: simulatedUser.restaurantName,
    token: generateToken(simulatedUser._id), // Generate a fake token
    message: "Usuário registrado com sucesso (simulado)."
  });
};

// @desc    Authenticate user & get token (Simulated)
// @route   POST /api/auth/login
// @access  Public
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  console.log("Simulating login attempt for:", email);

  // Simulate finding user and checking password
  // Use the test user defined in frontend simulation
  if (email === "teste@chefia.studio" && password === "senha123") {
    const simulatedUserId = "sim_test_user_123";
    res.json({
      _id: simulatedUserId,
      name: "Usuário Teste",
      email: email,
      token: generateToken(simulatedUserId),
      message: "Login bem-sucedido (simulado)."
    });
  } else {
    res.status(401).json({ message: "Credenciais inválidas (simulado)" });
  }
};

// @desc    Get user profile (Simulated)
// @route   GET /api/auth/profile
// @access  Private (Placeholder)
const getUserProfile = async (req, res) => {
  // In real app, get user ID from token (req.user set by protect middleware)
  const simulatedUserId = "sim_test_user_123"; // Assume logged in user
  console.log("Simulating fetching profile for user:", simulatedUserId);

  // Simulate fetching user data (replace with DB query later)
  const simulatedUser = {
      _id: simulatedUserId,
      name: "Usuário Teste",
      email: "teste@chefia.studio",
      restaurantName: "Restaurante Exemplo",
      businessType: "Pizzaria",
      address: "Rua Fictícia, 456",
      whatsapp: "(11) 98765-4321",
      menuLink: "https://exemplo.com/menu",
      subscriptionStatus: "active",
      metaConnectionStatus: "connected",
  };

  res.json(simulatedUser);
};

// @desc    Update user profile / restaurant info (Simulated)
// @route   PUT /api/auth/profile
// @access  Private (Placeholder)
const updateUserProfile = async (req, res) => {
  // In real app, get user ID from token
  const simulatedUserId = "sim_test_user_123";
  console.log("Simulating updating profile for user:", simulatedUserId);
  console.log("Received data:", req.body);

  // Simulate updating user data (replace with DB update later)
  const updatedData = req.body;

  // Simulate success
  res.json({ 
      message: "Perfil atualizado com sucesso (simulado)",
      updatedData // Send back the data received for confirmation
  });
};

// @desc    Update user subscription status (Simulated)
// @route   PUT /api/auth/subscription
// @access  Private (Placeholder)
const updateSubscription = async (req, res) => {
    const { status } = req.body; // e.g., 'active', 'inactive'
    const simulatedUserId = "sim_test_user_123";
    console.log(`Simulating updating subscription status to '${status}' for user:`, simulatedUserId);

    // Simulate update
    res.json({ 
        message: `Assinatura atualizada para ${status} (simulado)`,
        subscriptionStatus: status
    });
};

module.exports = {
  registerUser,
  loginUser,
  getUserProfile,
  updateUserProfile,
  updateSubscription,
};

